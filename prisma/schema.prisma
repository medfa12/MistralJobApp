generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  username               String?   @unique
  firstName              String?   @map(name: "first_name")
  lastName               String?   @map(name: "last_name")
  email                  String    @unique
  password               String
  avatar                 String?
  bio                    String?
  job                    String?
  role                   String    @default("member")
  isStripeActivated      Boolean   @default(false) @map(name: "is_stripe_activated")
  stripeCustomerId       String?   @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  updatedAt              DateTime  @updatedAt @map(name: "updated_at")

  conversations          ChatConversation[]
  usageLogs              UsageLog[]
  artifacts              Artifact[]
  projects               Project[]
  projectConversations   ProjectConversation[]

  @@map(name: "users")
}

model ChatConversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  model     String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]
  artifacts Artifact[]

  @@map(name: "chat_conversations")
}

model ChatMessage {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  conversationId          String              @db.ObjectId
  role                    String
  content                 String
  artifact                Json?
  toolCall                Json?
  inspectedCodeAttachment Json?
  createdAt               DateTime            @default(now()) @map(name: "created_at")
  
  conversation            ChatConversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  attachments             MessageAttachment[]

  @@map(name: "chat_messages")
}

model MessageAttachment {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  messageId          String      @db.ObjectId
  type               String
  fileName           String      @map(name: "file_name")
  fileSize           Int         @map(name: "file_size")
  mimeType           String      @map(name: "mime_type")
  cloudinaryPublicId String      @map(name: "cloudinary_public_id")
  cloudinaryUrl      String      @map(name: "cloudinary_url")
  createdAt          DateTime    @default(now()) @map(name: "created_at")
  
  message            ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map(name: "message_attachments")
}

model UsageLog {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  model           String
  inputTokens     Int      @map(name: "input_tokens")
  outputTokens    Int      @map(name: "output_tokens")
  totalTokens     Int      @map(name: "total_tokens")
  requestType     String   @map(name: "request_type")
  conversationId  String?  @db.ObjectId
  createdAt       DateTime @default(now()) @map(name: "created_at")
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "usage_logs")
  @@index([userId, createdAt])
}

model Artifact {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  conversationId  String?   @db.ObjectId
  identifier      String
  type            String
  title           String
  code            String
  language        String?
  versions        Json?
  currentVersion  Int?      @map(name: "current_version")
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation    ChatConversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map(name: "artifacts")
  @@index([userId, createdAt])
  @@index([conversationId])
}

model Project {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  userId        String                @db.ObjectId
  name          String
  description   String?
  emoji         String?
  totalSize     Int                   @default(0) @map(name: "total_size")
  documentCount Int                   @default(0) @map(name: "document_count")
  createdAt     DateTime              @default(now()) @map(name: "created_at")
  updatedAt     DateTime              @updatedAt @map(name: "updated_at")
  
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     ProjectDocument[]
  chunks        DocumentChunk[]
  conversations ProjectConversation[]

  @@map(name: "projects")
  @@index([userId, createdAt])
}

model ProjectDocument {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  projectId          String          @db.ObjectId
  name               String
  extension          String
  mimeType           String          @map(name: "mime_type")
  size               Int
  numberOfPages      Int?            @map(name: "number_of_pages")
  cloudinaryUrl      String          @map(name: "cloudinary_url")
  cloudinaryPublicId String          @map(name: "cloudinary_public_id")
  processingStatus   String          @default("pending") @map(name: "processing_status")
  chunkCount         Int             @default(0) @map(name: "chunk_count")
  errorMessage       String?         @map(name: "error_message")
  isActive           Boolean         @default(true) @map(name: "is_active")
  deletedAt          DateTime?       @map(name: "deleted_at")
  uploadedAt         DateTime        @default(now()) @map(name: "uploaded_at")
  processedAt        DateTime?       @map(name: "processed_at")
  
  project            Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chunks             DocumentChunk[]

  @@map(name: "project_documents")
  @@index([projectId, isActive])
}

model DocumentChunk {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  projectId  String          @db.ObjectId
  documentId String          @db.ObjectId
  chunkIndex Int             @map(name: "chunk_index")
  content    String
  tokenCount Int             @map(name: "token_count")
  embedding  Float[]
  metadata   Json?
  createdAt  DateTime        @default(now()) @map(name: "created_at")
  
  project    Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  document   ProjectDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map(name: "document_chunks")
  @@index([projectId])
  @@index([documentId])
  @@index([projectId, documentId, chunkIndex])
}

model ProjectConversation {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  projectId               String                    @db.ObjectId
  userId                  String                    @db.ObjectId
  title                   String
  messagesCount           Int                       @default(0) @map(name: "messages_count")
  createdAt               DateTime                  @default(now()) @map(name: "created_at")
  updatedAt               DateTime                  @updatedAt @map(name: "updated_at")
  
  project                 Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages                ProjectConversationMessage[]

  @@map(name: "project_conversations")
  @@index([projectId, createdAt])
  @@index([userId, createdAt])
}

model ProjectConversationMessage {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  conversationId  String              @db.ObjectId
  role            String
  content         String
  createdAt       DateTime            @default(now()) @map(name: "created_at")
  
  conversation    ProjectConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map(name: "project_conversation_messages")
  @@index([conversationId, createdAt])
}
