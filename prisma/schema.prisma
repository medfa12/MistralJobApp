// Prisma schema for MongoDB
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  username               String?   @unique
  firstName              String?   @map(name: "first_name")
  lastName               String?   @map(name: "last_name")
  email                  String    @unique
  password               String
  avatar                 String?   // URL or path to avatar image
  bio                    String?   // About me section
  job                    String?   // Job title
  role                   String    @default("member") // "admin" or "member"
  
  // Stripe subscription fields
  isStripeActivated      Boolean   @default(false) @map(name: "is_stripe_activated")
  stripeCustomerId       String?   @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  
  // Timestamps
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  updatedAt              DateTime  @updatedAt @map(name: "updated_at")

  // Relations
  conversations          ChatConversation[]

  @@map(name: "users")
}

model ChatConversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String   // Title/summary of the conversation
  model     String   // Mistral model used
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  
  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]

  @@map(name: "chat_conversations")
}

model ChatMessage {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String              @db.ObjectId
  role           String
  content        String
  createdAt      DateTime            @default(now()) @map(name: "created_at")
  
  conversation   ChatConversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  attachments    MessageAttachment[]

  @@map(name: "chat_messages")
}

model MessageAttachment {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  messageId          String      @db.ObjectId
  type               String
  fileName           String      @map(name: "file_name")
  fileSize           Int         @map(name: "file_size")
  mimeType           String      @map(name: "mime_type")
  cloudinaryPublicId String      @map(name: "cloudinary_public_id")
  cloudinaryUrl      String      @map(name: "cloudinary_url")
  createdAt          DateTime    @default(now()) @map(name: "created_at")
  
  message            ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map(name: "message_attachments")
}

